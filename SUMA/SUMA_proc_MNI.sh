#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Tue Oct 15 15:45:40 2019"
echo "(version 6.47, August 27, 2019)"
echo "execution started: `date`"

# to execute via tcsh: 
#   tcsh -xef proc.${subj} |& tee output.proc.${subj}
# to execute via bash: 
#   tcsh -xef proc.${subj} 2>&1 | tee output.proc.${subj}

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 27 Jun 2019
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 27 Jun 2019)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = ${subj}
endif

# assign output directory name
set output_dir = $subj.results_SUMA

# set directory variables
set surface_dir = ${PWD}/FS/${subj}_T1w/surf/SUMA

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 2`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp ${PWD}/${subj}/func/congruent.1D    \
    ${PWD}/${subj}/func/incongruent.1D \
    $output_dir/stimuli

# copy anatomy to results dir
3dcopy ${subj}/anat/${subj}_T1w.nii.gz $output_dir/${subj}_T1w

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir,
# while removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat \
    ${subj}/func/${subj}_task-flanker_run-1_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat \
    ${subj}/func/${subj}_task-flanker_run-2_bold.nii.gz'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 146 146 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 2 -legendre                     \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# get run number and TR index for minimum outlier volume
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       \
                          -index_to_run_tr $minindex` )
# save run and TR indices for extraction of vr_base_min_outlier
set minoutrun = $ovals[1]
set minouttr  = $ovals[2]
echo "min outlier: run $minoutrun, TR $minouttr" | tee out.min_outlier.txt

# ================================= tshift =================================
# time shift data so all slice timing is the same 
foreach run ( $runs )
    3dTshift -tzero 0 -quintic -prefix pb01.$subj.r$run.tshift \
             pb00.$subj.r$run.tcat+orig
end

# --------------------------------
# extract volreg registration base
3dbucket -prefix vr_base_min_outlier                           \
    pb01.$subj.r$minoutrun.tshift+orig"[$minouttr]"

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be intermediate, stripped, ${subj}_T1w_ns+orig)
align_epi_anat.py -anat2epi -anat ${subj}_T1w+orig \
       -save_skullstrip -suffix _al_junk          \
       -epi vr_base_min_outlier+orig -epi_base 0  \
       -epi_strip 3dAutomask                      \
       -giant_move                                \
       -volreg off -tshift off

# ================================== tlrc ==================================
# warp anatomy to standard space
@auto_tlrc -base MNI_avg152T1+tlrc -input ${subj}_T1w_ns+orig -no_ss

# store forward transformation matrix in a text file
cat_matvec ${subj}_T1w_ns+tlrc::WARP_DATA -I > warp.anat.Xat.1D

# ================================= volreg =================================
# align each dset to base volume, to anat, warp to tlrc space

# verify that we have a +tlrc warp dataset
if ( ! -f ${subj}_T1w_ns+tlrc.HEAD ) then
    echo "** missing +tlrc warp dataset: ${subj}_T1w_ns+tlrc.HEAD" 
    exit
endif

# register and warp
foreach run ( $runs )
    # register each volume to the base image
    3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig    \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run \
             -cubic                                             \
             -1Dmatrix_save mat.r$run.vr.aff12.1D               \
             pb01.$subj.r$run.tshift+orig

    # create an all-1 dataset to mask the extents of the warp
    3dcalc -overwrite -a pb01.$subj.r$run.tshift+orig -expr 1   \
           -prefix rm.epi.all1

    # catenate volreg/epi2anat/tlrc xforms
    cat_matvec -ONELINE                                         \
               ${subj}_T1w_ns+tlrc::WARP_DATA -I                 \
               ${subj}_T1w_al_junk_mat.aff12.1D -I               \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform: volreg/epi2anat/tlrc
    3dAllineate -base ${subj}_T1w_ns+tlrc                        \
                -input pb01.$subj.r$run.tshift+orig             \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D         \
                -mast_dxyz 3                                    \
                -prefix rm.epi.nomask.r$run

    # warp the all-1 dataset for extents masking 
    3dAllineate -base ${subj}_T1w_ns+tlrc                        \
                -input rm.epi.all1+orig                         \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D         \
                -mast_dxyz 3 -final NN -quiet                   \
                -prefix rm.epi.1.r$run

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+tlrc
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+tlrc
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+tlrc -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+tlrc -b mask_epi_extents+tlrc \
           -expr 'a*b' -prefix pb02.$subj.r$run.volreg
end

# warp the volreg base EPI dataset to make a final version
cat_matvec -ONELINE                                             \
           ${subj}_T1w_ns+tlrc::WARP_DATA -I                     \
           ${subj}_T1w_al_junk_mat.aff12.1D -I  > mat.basewarp.aff12.1D

3dAllineate -base ${subj}_T1w_ns+tlrc                            \
            -input vr_base_min_outlier+orig                     \
            -1Dmatrix_apply mat.basewarp.aff12.1D               \
            -mast_dxyz 3                                        \
            -prefix final_epi_vr_base_min_outlier

# create an anat_final dataset, aligned with stats
3dcopy ${subj}_T1w_ns+tlrc anat_final.$subj

# record final registration costs
3dAllineate -base final_epi_vr_base_min_outlier+tlrc -allcostX  \
            -input anat_final.$subj+tlrc |& tee out.allcostX.txt

# -----------------------------------------
# warp anat follower datasets (affine)
3dAllineate -source ${subj}_T1w+orig                             \
            -master anat_final.$subj+tlrc                       \
            -final wsinc5 -1Dmatrix_apply warp.anat.Xat.1D      \
            -prefix anat_w_skull_warped

# ======================= surf (map data to surface) =======================
# map EPI data to the surface domain



# align the surface anatomy with the current experiment anatomy
@SUMA_AlignToExperiment -exp_anat anat_final.$subj+tlrc             \
                        -surf_anat $surface_dir/${subj}_SurfVol+orig \
                        -wd -strip_skull surf_anat                  \
                        -atlas_followers -overwrite_resp S          \
                        -prefix ${subj}_SurfVol_Alnd_Exp 

# map volume data to the surface of each hemisphere
foreach hemi ( lh rh )
    foreach run ( $runs )
        3dVol2Surf -spec $surface_dir/std.141.${subj}_${hemi}.spec   \
                   -sv ${subj}_SurfVol_Alnd_Exp+tlrc                \
                   -surf_A smoothwm                                 \
                   -surf_B pial                                     \
                   -f_index nodes                                   \
                   -f_steps 10                                      \
                   -map_func ave                                    \
                   -oob_value 0                                     \
                   -grid_parent pb02.$subj.r$run.volreg+tlrc        \
                   -out_niml pb03.$subj.$hemi.r$run.surf.niml.dset 
    end
end

# make local script for running suma, and make it executable
echo suma -spec $surface_dir/std.141.${subj}_lh.spec                 \
          -sv ${subj}_SurfVol_Alnd_Exp+tlrc > run_suma
chmod 755 run_suma

# =========================== blur (on surface) ============================
foreach hemi ( lh rh )
    foreach run ( $runs )
        # to save time, estimate blur parameters only once
        if ( ! -f surf.smooth.params.1D ) then
            SurfSmooth -spec $surface_dir/std.141.${subj}_${hemi}.spec    \
                       -surf_A smoothwm                                  \
                       -input pb03.$subj.$hemi.r$run.surf.niml.dset      \
                       -met HEAT_07                                      \
                       -target_fwhm 4.0                                  \
                       -blurmaster pb03.$subj.$hemi.r$run.surf.niml.dset \
                       -detrend_master                                   \
                       -output pb04.$subj.$hemi.r$run.blur.niml.dset     \
                       | tee surf.smooth.params.1D 
        else
            set params = `1dcat surf.smooth.params.1D`
            SurfSmooth -spec $surface_dir/std.141.${subj}_${hemi}.spec    \
                       -surf_A smoothwm                                  \
                       -input pb03.$subj.$hemi.r$run.surf.niml.dset      \
                       -met HEAT_07                                      \
                       -Niter $params[1]                                 \
                       -sigma $params[2]                                 \
                       -output pb04.$subj.$hemi.r$run.blur.niml.dset 
        endif
    end
end

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach hemi ( lh rh )
    foreach run ( $runs )
        3dTstat -prefix rm.$hemi.mean_r$run.niml.dset    \
            pb04.$subj.$hemi.r$run.blur.niml.dset
        3dcalc -a pb04.$subj.$hemi.r$run.blur.niml.dset  \
               -b rm.$hemi.mean_r$run.niml.dset          \
               -expr 'min(200, a/b*100)*step(a)*step(b)' \
               -prefix pb05.$subj.$hemi.r$run.scale.niml.dset
    end
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 2               \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -infile dfile_rall.1D -set_nruns 2               \
           -derivative -demean -write motion_deriv.1D

# convert motion parameters for per-run regression
1d_tool.py -infile motion_demean.1D -set_nruns 2            \
           -split_into_pad_runs mot_demean

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_nruns 2               \
    -show_censor_count -censor_prev_TR                      \
    -censor_motion 0.3 motion_${subj}

# note TRs that were not censored
set ktrs = `1d_tool.py -infile motion_${subj}_censor.1D     \
                       -show_trs_uncensored encoded`

# ------------------------------
# run the regression analysis
foreach hemi ( lh rh )
    3dDeconvolve -input pb05.$subj.$hemi.r*.scale.niml.dset \
        -censor motion_${subj}_censor.1D                    \
        -ortvec mot_demean.r01.1D mot_demean_r01            \
        -ortvec mot_demean.r02.1D mot_demean_r02            \
        -polort 2                                           \
        -num_stimts 2                                       \
        -stim_times 1 stimuli/congruent.1D 'GAM'            \
        -stim_label 1 congruent                             \
        -stim_times 2 stimuli/incongruent.1D 'GAM'          \
        -stim_label 2 incongruent                           \
        -jobs 8                                             \
        -gltsym 'SYM: congruent -incongruent'               \
        -glt_label 1 Con-Inc                                \
        -gltsym 'SYM: incongruent -congruent'               \
        -glt_label 2 Inc-Con                                \
        -fout -tout -x1D X.xmat.1D -xjpeg X.jpg             \
        -x1D_uncensored X.nocensor.xmat.1D                  \
        -fitts fitts.$subj.$hemi.niml.dset                  \
        -errts errts.${subj}.$hemi.niml.dset                \
        -bucket stats.$subj.$hemi.niml.dset

    # -- execute the 3dREMLfit script, written by 3dDeconvolve --
    tcsh -x stats.REML_cmd 
end


# display any large pairwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# display degrees of freedom info from X-matrix
1d_tool.py -show_df_info -infile X.xmat.1D |& tee out.df_info.txt

# create an all_runs dataset to match the fitts, errts, etc.
foreach hemi ( lh rh )
    3dTcat -prefix all_runs.$subj.$hemi.niml.dset           \
        pb05.$subj.$hemi.r*.scale.niml.dset
end

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
foreach hemi ( lh rh )
    3dTstat -mean -prefix rm.signal.all.$hemi.niml.dset     \
        all_runs.$subj.$hemi.niml.dset"[$ktrs]"
    3dTstat -stdev -prefix rm.noise.all.$hemi.niml.dset     \
        errts.${subj}.$hemi.niml.dset"[$ktrs]"
    3dcalc -a rm.signal.all.$hemi.niml.dset                 \
           -b rm.noise.all.$hemi.niml.dset                  \
           -expr 'a/b' -prefix TSNR.$subj.$hemi.niml.dset 
end

# create ideal files for fixed response stim types
1dcat X.nocensor.xmat.1D'[6]' > ideal_congruent.1D
1dcat X.nocensor.xmat.1D'[7]' > ideal_incongruent.1D

# --------------------------------------------------
# extract non-baseline regressors from the X-matrix,
# then compute their sum
1d_tool.py -infile X.nocensor.xmat.1D -write_xstim X.stim.xmat.1D
3dTstat -sum -prefix sum_ideal.1D X.stim.xmat.1D

# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj    \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 0.3 -exit0 \
    -ss_review_dset out.ss_review.$subj.txt    \
    -write_uvars_json out.ss_review_uvars.json

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) then
    ./@ss_review_basic |& tee out.ss_review.$subj.txt

    # generate html ss review pages
    # (akin to static images from running @ss_review_driver)
    apqc_make_tcsh.py -review_style basic -subj_dir . \
        -uvar_json out.ss_review_uvars.json
    tcsh @ss_review_html |& tee out.review_html
    apqc_make_html.py -qc_dir QC_$subj

    echo "\nconsider running: \n\n    afni_open -b $subj.results/QC_$subj/index.html\n"
endif

# return to parent directory (just in case...)
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id ${subj} -script proc.${subj} -scr_overwrite -blocks            \
#     tshift align tlrc volreg surf blur scale regress -copy_anat                    \
#     ${PWD}/${subj}/anat/${subj}_T1w.nii.gz -dsets              \
#     ${PWD}/${subj}/func/${subj}_task-flanker_run-1_bold.nii.gz \
#     ${PWD}/${subj}/func/${subj}_task-flanker_run-2_bold.nii.gz \
#     -tcat_remove_first_trs 0 -align_opts_aea -giant_move -tlrc_base                \
#     MNI_avg152T1+tlrc -volreg_align_to MIN_OUTLIER -volreg_align_e2a               \
#     -volreg_tlrc_warp -surf_anat                                                   \
#     ${PWD}/FS/${subj}_T1w/surf/SUMA/${subj}_SurfVol+orig       \
#     -surf_spec                                                                     \
#     ${PWD}/FS/${subj}_T1w/surf/SUMA/std.141.${subj}_lh.spec    \
#     ${PWD}/FS/${subj}_T1w/surf/SUMA/std.141.${subj}_rh.spec    \
#     -blur_size 4.0 -regress_stim_times                                             \
#     ${PWD}/${subj}/func/congruent.1D                          \
#     ${PWD}/${subj}/func/incongruent.1D                        \
#     -regress_stim_labels congruent incongruent -regress_basis GAM                  \
#     -regress_censor_motion 0.3 -regress_motion_per_run -regress_opts_3dD           \
#     -jobs 8 -gltsym 'SYM: congruent -incongruent' -glt_label 1 Con-Inc             \
#     -gltsym 'SYM: incongruent -congruent' -glt_label 2 Inc-Con                     \
#     -regress_reml_exec -regress_make_ideal_sum sum_ideal.1D
